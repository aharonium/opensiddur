<?xml version="1.0" encoding="utf-8"?>
<TestSuite
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:a="http://jewishliturgy.org/ns/access/1.0"
  xmlns:j="http://jewishliturgy.org/ns/jlptei/1.0"
  xmlns:http="http://expath.org/ns/http-client">
  <suiteName>Original text data API</suiteName>
  <description>
    <p>Test original data API</p>
    <author>Efraim Feinstein</author>
    <copyright>Copyright 2012 Efraim Feinstein,
    Licensed under the GNU Lesser General Public License, version 3 or later</copyright>
  </description>
  <asUser>testuser</asUser>
  <password>testuser</password>
  <setup>
    <!-- put all tests into en/1900/01 -->
    <create-collection parent="/data/original/en" name="1900" />
    <create-collection parent="/data/original/en/1900" name="01"/>
    <!-- support files required for validity -->
    <store collection="/user" name="testuser.xml">
      <j:contributor>
        <tei:idno>testuser</tei:idno>
        <tei:name>Test User</tei:name>
      </j:contributor>
    </store>
    <!-- existing resource with read/write access for testuser -->
    <copy source="/code/tests/api/data/original" name="Existing.xml" 
      destination="/data/original/en/1900/01" />
    <copy source="/code/tests/api/data/original" name="Existing.xml" 
      destination="/data/original/en/1900/01" destination-name="NoAccess.xml" />
    <copy source="/code/tests/api/data/original" name="Existing.xml" 
      destination="/data/original/en/1900/01" destination-name="NoWriteAccess.xml" />
    <!-- query result -->
    <copy source="/code/tests/api/data/original" name="QueryResult.xml"
      destination="/data/original/en/1900/01"/>
    <!-- existing, valid resource with no read access -->
    <code><![CDATA[
      system:as-user("admin", $magic:password,
        let $collections := ("/data/original/en/1900", "/data/original/en/1900/01") 
        let $existing-uri := xs:anyURI("/data/original/en/1900/01/Existing.xml")
        let $no-access-uri := xs:anyURI("/data/original/en/1900/01/NoAccess.xml")
        let $no-write-access-uri := xs:anyURI("/data/original/en/1900/01/NoWriteAccess.xml")
        return (
          for $collection in $collections
          let $c-uri := xs:anyURI($collection)
          return (
            sm:chown($c-uri, "admin"),
            sm:chgrp($c-uri, "everyone"),
            sm:chmod($c-uri, "rwxrwxr-x")
          ),
          sm:chown($existing-uri, "testuser"),
          sm:chgrp($existing-uri, "everyone"),
          sm:chmod($existing-uri, "rw-rw-r--"),
          sm:chown($no-access-uri, "testuser2"),
          sm:chgrp($no-access-uri, "everyone"),
          sm:chmod($no-access-uri, "rw-------"),
          sm:chown($no-write-access-uri, "testuser2"),
          sm:chgrp($no-write-access-uri, "everyone"),
          sm:chmod($no-write-access-uri, "rw-r--r--")
      ))
    ]]></code>
  </setup>
  <tearDown>
    <remove-collection collection="/data/original/en/1900"/>
  </tearDown>
  <namespace prefix="html">http://www.w3.org/1999/xhtml</namespace>
  <namespace prefix="tei">http://www.tei-c.org/ns/1.0</namespace>
  <namespace prefix="a">http://jewishliturgy.org/ns/access/1.0</namespace>
  <namespace prefix="j">http://jewishliturgy.org/ns/jlptei/1.0</namespace>
  <imports>
    import module namespace orig="http://jewishliturgy.org/api/data/original"
      at "xmldb:exist:///code/api/data/original.xqm";
    import module namespace magic="http://jewishliturgy.org/magic"
      at "xmldb:exist:///code/magic/magic.xqm";
  </imports>
  <TestSet>
    <testName>orig:get()</testName>
    <test>
      <task>Get an existing resource</task>
      <code><![CDATA[
      orig:get("Existing")
      ]]></code> 
      <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
    </test>
    <test>
      <task>Get a nonexisting resource</task>
      <code><![CDATA[
      orig:get("DoesNotExist")
      ]]></code> 
      <class href="../common.t.xml#NotFound"/>
    </test>
    <test>
      <task>Get a resource with no read access</task>
      <code><![CDATA[
      orig:get("NoAccess")
      ]]></code> 
      <class href="../common.t.xml#NotFound"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:list()</testName>
    <test>
      <task>List all resources</task>
      <code><![CDATA[
        orig:list("", 1, 100)
      ]]></code>
      <xpath desc="returns at least 1 result">count(.//html:li[@class="result"])&gt;=1</xpath>
      <xpath desc="results include a pointer to access API">
        every $li in .//html:li[@class="result"] 
        satisfies exists($li/html:a[@class="alt"][@property="access"])
      </xpath>
      <class href="../common.t.xml#SearchResults"/>
    </test>
    <test>
      <task>List some resources</task>
      <code><![CDATA[
        orig:list("", 1, 2)
      ]]></code>
      <xpath desc="returns 2 results">count(.//html:li[@class="result"])=2</xpath>
      <class href="../common.t.xml#SearchResults"/>
    </test>
    <test>
      <task>Respond to a query</task>
      <code><![CDATA[
        orig:list("Query", 1, 100)
      ]]></code>
      <xpath desc="returns 1 results">count(.//html:ol[@class="results"]/html:li)=1</xpath>
      <class href="../common.t.xml#SearchResults"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:delete()</testName>
    <test>
      <task>Remove an existing resource</task>
      <code><![CDATA[
      orig:delete("Existing")
      ]]></code>
      <class href="../common.t.xml#NoData"/>
    </test>
    <test>
      <task>Remove a nonexisting resource</task>
      <code><![CDATA[
      orig:delete("DoesNotExist")
      ]]></code>
      <class href="../common.t.xml#NotFound"/>
    </test>
    <test>
      <task>Remove a resource without write access</task>
      <code><![CDATA[
      orig:delete("NoWriteAccess")
      ]]></code>
      <class href="../common.t.xml#Forbidden"/>
    </test>
    <test ignore="yes">
      <task>Remove a resource that has external references</task>
      <code><![CDATA[
      orig:delete("ExternalReference")
      ]]></code>
      <class href="../common.t.xml#BadRequest"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:post()</testName>
    <tearDown>
      <code><![CDATA[
      let $document := 
        collection("/data/original")//tei:titleStmt/tei:title[@type="main"][.="Valid"]/root(.)
      where exists($document)
      return xmldb:remove(
        util:collection-name($document),
        util:document-name($document)
        )
      ]]></code>
    </tearDown>
    <test>
      <task>Post a valid resource</task>
      <code><![CDATA[
      orig:post(doc("/code/tests/api/data/original/Valid.xml"))
      ]]></code>
      <class href="../common.t.xml#Created"/>
      <expected 
        desc="a change record has been added"
        xpath="collection('/data/original/en')[descendant::tei:title[@type='main'][.='Valid']]//tei:revisionDesc/tei:change[1]">
        <tei:change type="created" who="/user/testuser" when="..."/>
      </expected>
    </test>
    <test>
      <task>Post an invalid resource</task>
      <code><![CDATA[
      orig:post(doc("/code/tests/api/data/original/Invalid.xml"))
      ]]></code>
      <class href="../common.t.xml#BadRequest"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:put()</testName>
    <test>
      <task>Put a valid resource to an existing resource</task>
      <code><![CDATA[
      orig:put("Existing", doc("/code/tests/api/data/original/Existing-After-Put.xml"))
      ]]></code>
      <class href="../common.t.xml#NoData"/>
      <expected 
        desc="a change record has been added"
        xpath="(collection('/data/original/en')[descendant::tei:title[@type='main'][.='Existing']]//tei:revisionDesc/tei:change)[1]">
        <tei:change type="edited" who="/user/testuser" when="..."/>
      </expected>
    </test>
    <test>
      <task>Put a valid resource to a nonexisting resource</task>
      <code><![CDATA[
      orig:put("DoesNotExist", doc("/code/tests/api/data/original/Valid.xml"))
      ]]></code>
    </test>
    <test>
      <task>Put an invalid resource</task>
      <code><![CDATA[
      orig:put("Existing", doc("/code/tests/api/data/original/Invalid.xml"))
      ]]></code>
      <class href="../common.t.xml#BadRequest"/>
    </test>
    <test>
      <task>Put a valid resource that is invalidated by an illegal change</task>
      <code><![CDATA[
      orig:put("Existing", doc("/code/tests/api/data/original/Invalid-After-Put-Illegal-RevisionDesc.xml"))
      ]]></code>
    </test>
  </TestSet>
  <TestSet>
    <testName>Unauthenticated</testName>
    <asUser/>
    <password/>
    <test>
      <task>orig:get(): Get an existing resource</task>
      <code><![CDATA[
      orig:get("Existing")
      ]]></code> 
      <xpath desc="Returns a TEI resource">exists(./tei:TEI)</xpath>
    </test>
    <test>
      <task>orig:get(): Get an existing resource with no read access</task>
      <code><![CDATA[
      orig:get("NoAccess")
      ]]></code> 
      <class href="../common.t.xml#NotFound"/>
    </test>
    <test>
      <task>orig:get(): Get a nonexisting resource</task>
      <code><![CDATA[
      orig:get("DoesNotExist")
      ]]></code> 
      <class href="../common.t.xml#NotFound"/>
    </test>
    <test>
      <task>orig:list(): Get a list of all resources</task>
      <code><![CDATA[
      orig:list("", 1, 100)
      ]]></code>
      <xpath desc="returns some results">count(.//html:ul[@class="results"]/html:li)&gt;=1</xpath>
      <xpath desc="does not list resource with no read access">empty(.//html:li[@class="result"]/html:a[@class="document"]/@href[contains(., "NoAccess")])</xpath>
      <class href="../common.t.xml#SearchResults"/>
    </test>
    <test>
      <task>orig:delete(): Remove an existing resource</task>
      <code><![CDATA[
      orig:delete("Existing")
      ]]></code>
      <class href="../common.t.xml#Unauthorized"/>
    </test>
    <test>
      <task>orig:delete(): Remove a nonexisting resource</task>
      <code><![CDATA[
      orig:delete("DoesNotExist")
      ]]></code>
      <class href="../common.t.xml#NotFound"/>
    </test>
    <test>
      <task>orig:post(): Post a resource</task>
      <code><![CDATA[
      orig:post(doc("/code/tests/api/data/original/Valid.xml"))
      ]]></code>
      <class href="../common.t.xml#Unauthorized"/>
    </test>
    <test>
      <task>orig:put(): Put an existing resource</task>
      <code><![CDATA[
      orig:put("Existing", doc("/code/tests/api/data/original/Existing.xml"))
      ]]></code>
      <class href="../common.t.xml#Unauthorized"/>
    </test>
    <test>
      <task>orig:put(): Put a nonexisting resource</task>
      <code><![CDATA[
      orig:put("DoesNotExist", doc("/code/tests/api/data/original/Existing.xml"))
      ]]></code>
      <class href="../common.t.xml#NotFound"/>
    </test>
    <test>
      <task>orig:get-access()</task>
      <code><![CDATA[
      orig:get-access("Existing")
      ]]></code>
      <xpath desc="an access structure is returned">self::a:access</xpath>
    </test>
    <test>
      <task>orig:put-access()</task>
      <code><![CDATA[
      orig:put-access("Existing", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="false">everyone</a:group>
          <a:world read="false" write="false"/>
        </a:access>
        })
      ]]></code>
      <class href="../common.t.xml#Unauthorized"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:get-access()</testName>
    <test>
      <task>For an existing resource</task>
      <code><![CDATA[
      orig:get-access("Existing")
      ]]></code>
      <xpath desc="returns an access structure">exists(./self::a:access)</xpath>
    </test>
    <test>
      <task>For a nonexistent resource</task>
      <code><![CDATA[
      orig:get-access("DoesNotExist")
      ]]></code>
      <class href="../common.t.xml#NotFound"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:put-access()</testName>
    <test>
      <task>Set with a valid access structure</task>
      <code><![CDATA[
      orig:put-access("Existing", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="true">everyone</a:group>
          <a:world write="true" read="true"/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.xml#NoData"/>
    </test>
    <test>
      <task>With an invalid access structure</task>
      <code><![CDATA[
      orig:put-access("Existing", document{
        <a:access>
          <a:invalid/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.xml#BadRequest"/>
    </test>
    <test>
      <task>For a resource with no write access</task>
      <code><![CDATA[
      orig:put-access("NoWriteAccess", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="false">testuser</a:group>
          <a:world write="false" read="false"/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.xml#Forbidden"/>
    </test>
    <test>
      <task>For a nonexistent resource</task>
      <code><![CDATA[
      orig:put-access("DoesNotExist", document{
        <a:access>
          <a:owner>testuser</a:owner>
          <a:group write="false">testuser</a:group>
          <a:world write="false" read="false"/>
        </a:access>
      })
      ]]></code>
      <class href="../common.t.xml#NotFound"/>
    </test>
  </TestSet>
  <TestSet>
    <testName>orig:record-change()</testName>
    <setup>
      <store collection="/data/tests" name="With-RevisionDesc-And-Change.xml">
        <tei:TEI>
          <tei:teiHeader>
            <tei:revisionDesc>
              <tei:change who="/user/testuser" when="1900-01-01" type="created"/>
            </tei:revisionDesc>
          </tei:teiHeader>
        </tei:TEI>
      </store>
      <store collection="/data/tests" name="With-Empty-RevisionDesc.xml">
        <tei:TEI>
          <tei:teiHeader>
            <tei:revisionDesc/>
          </tei:teiHeader>
        </tei:TEI>
      </store>
      <store collection="/data/tests" name="With-No-RevisionDesc.xml">
        <tei:TEI>
          <tei:teiHeader>
            <tei:publicationStmt/>
          </tei:teiHeader>
        </tei:TEI>
      </store>
    </setup>
    <tearDown>
      <remove-document collection="/data/tests" name="With-RevisionDesc-And-Change.xml"/>
      <remove-document collection="/data/tests" name="With-Empty-RevisionDesc.xml"/>
      <remove-document collection="/data/tests" name="With-No-RevisionDesc.xml"/>
    </tearDown>
    <test>
      <task>add an edit record with revisionDesc and existing change</task>
      <code><![CDATA[
      orig:record-change(doc("/data/tests/With-RevisionDesc-And-Change.xml"), "edited")
      ]]></code>
      <expected 
        xpath="doc('/data/tests/With-RevisionDesc-And-Change.xml')//tei:revisionDesc/tei:change[1]" 
        desc="change is recorded">
        <tei:change who="/user/testuser" when="..." type="edited"/>
      </expected>
    </test>
    <test>
      <task>add an edit record with empty revisionDesc</task>
      <code><![CDATA[
      orig:record-change(doc("/data/tests/With-Empty-RevisionDesc.xml"), "edited")
      ]]></code>
      <expected 
        xpath="doc('/data/tests/With-Empty-RevisionDesc.xml')//tei:revisionDesc" 
        desc="change is recorded in a new revisionDesc">
        <tei:revisionDesc>
          <tei:change who="/user/testuser" when="..." type="edited"/>
        </tei:revisionDesc>    
      </expected>
    </test>
    <test>
      <task>add an edit record with no revisionDesc</task>
      <code><![CDATA[
      orig:record-change(doc("/data/tests/With-No-RevisionDesc.xml"), "created")
      ]]></code>
      <expected 
        xpath="doc('/data/tests/With-No-RevisionDesc.xml')//tei:revisionDesc" 
        desc="change is recorded in a new revisionDesc">
        <tei:revisionDesc>
          <tei:change who="/user/testuser" when="..." type="created"/>
        </tei:revisionDesc>    
      </expected>
    </test>
  </TestSet>
</TestSuite>