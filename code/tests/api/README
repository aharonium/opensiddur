How to read the API tests as documentation:

The API tests are written in Python, using the PyUnit testing framework, which
is described in detail at http://docs.python.org/library/unittest.html . PyUnit
tests are generally similar in structure to JUnit tests:
1. Each test is a class that inherits from unittest.TestCase
2. The setUp() function runs before each test
3. The tearDown() function runs after each test
4. The tests are each functions that begin with the word "test"

In our case, database access is abstracted with the ApiDB class, which handles
all HTTP transmissions. The database object is constructed as self.database
in each test's setUp() function. HTTP access is facilitated through the 
following functions, which call the REST API using the given method:

 self.database.get('/code/api/location')
  equivalent to GET http://localhost:8080/code/api/location

 self.database.post('/code/api/location', content)
 self.database.post('/code/api/location', content, contentType)
  equivalent to POST content to http://localhost:8080/code/api/location
  with the (optional) given content type

Note the following unexpected consequences of a bug/feature in eXist:

 self.database.put('/code/api/location', content)
 self.database.put('/code/api/location', content, contentType)
  equivalent to POST content to 
  http://localhost:8080/code/api/location?_method=PUT
  with the (optional) given content type

 self.database.delete('/code/api/location')
  equivalent to POST empty content to 
  http://localhost:8080/code/api/location?_method=DELETE

All the self.database.method() functions return a triplet, which is stored in
 (self.code, self.reason, self.data)
The test_* functions generally read from that triplet to determine whether the
test succeeded.

The testing functions rely on testing functions from apidb.BaseAPITest, a 
superclass of all of the API tests:
 self.assertResponse(code, expectedCode, reason, data)
  assert that the response status code is as expected. 
  *This function documents the expected HTTP status code in the given situation*
 
XML processing is accomplished using the libxml2 version of the ElementTree
library (see http://effbot.org/zone/element-index.htm and 
http://lxml.de/tutorial.html). 
 *That is how you tell what XML/HTML is expected in response to your API call*

In addition to unittest.TestCase, each test class may derive from:
 apidb.BaseAPITest - the API call requires no authentication
 apidb.BaseAPITestWithSession - the API call relies on cookies
 apidb.BaseAPITestWithHTTPBasic - the API call relies on HTTP Basic
      authentication. Note that this class actually forces authentication
      with the given username and password and does not wait to get a 
      401 return.


